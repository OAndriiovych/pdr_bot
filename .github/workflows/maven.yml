# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: dev

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Test Coverage
      uses: codecov/codecov-action@v3.1.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
  database:
    name: "Run Liquibase Update"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: liquibase/liquibase-github-action@v7
        with:
          operation: 'update'
          classpath: 'tg-bot/'
          changeLogFile: 'liquibase/dbchangelog.xml'
          username: ${{ secrets.DB_USERNAME }}
          password: ${{ secrets.DB_PASSWORD }}
          url: ${{ secrets.DB_URL }}
  deploy:
    name: CD part
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app-name: [ 'dev' ]
        s3-bucket: [ 'tertertert-sorce' ]
        s3-filename: [ 'develop-aws-codedeploy-${{ github.sha }}' ]
        deploy-group: [ 'develop' ]
    needs: [database, build]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml -Dmaven.test.skip=true
      # copying jar
      - name: Copying scripts
        run: cp tg-bot/target/tg-bot-1.0-SNAPSHOT.jar ./tg-bot/target/deploy
      - name: ls
        run: ls tg-bot/target
      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
#       Deploy push to S3
      - name: AWS Deploy push
        run: |
          aws deploy push \
          --application-name ${{ matrix.app-name }} \
          --description "Revision of the ${{ matrix.appname }}-${{ github.sha }}" \
          --ignore-hidden-files \
          --s3-location s3://${{ matrix.s3-bucket }}/${{ matrix.s3-filename }}.zip \
          --source ./tg-bot/target/deploy
      # Creating deployment via CodeDeploy
      - name: Creating AWS Deployment
        run: |
          aws deploy create-deployment \
          --application-name ${{ matrix.app-name }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ matrix.deploy-group }} \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=${{ matrix.s3-bucket }},key=${{ matrix.s3-filename }}.zip,bundleType=zip \
